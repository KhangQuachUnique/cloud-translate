// Service x·ª≠ l√Ω nh·∫≠n di·ªán text trong ·∫£nh b·∫±ng AWS Rekognition
const AWS = require('aws-sdk');

// C·∫•u h√¨nh AWS SDK
AWS.config.update({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION || 'us-east-1'
});

// Kh·ªüi t·∫°o AWS Rekognition client
const rekognition = new AWS.Rekognition();

/**
 * H√†m nh·∫≠n di·ªán text trong ·∫£nh
 * @param {Buffer} imageBuffer - D·ªØ li·ªáu ·∫£nh d·∫°ng Buffer
 * @returns {Promise<string>} - To√†n b·ªô text ƒë∆∞·ª£c ph√°t hi·ªán trong ·∫£nh
 */
async function detectTextInImage(imageBuffer) {
  try {
    // Chu·∫©n b·ªã tham s·ªë cho AWS Rekognition
    const params = {
      Image: {
        Bytes: imageBuffer // G·ª≠i ·∫£nh d·∫°ng binary
      }
    };

    // G·ªçi API AWS Rekognition ƒë·ªÉ detect text
    console.log('üîç ƒêang ph√°t hi·ªán text trong ·∫£nh...');
    const result = await rekognition.detectText(params).promise();

    // result.TextDetections ch·ª©a m·∫£ng c√°c text ƒë∆∞·ª£c ph√°t hi·ªán
    // M·ªói ph·∫ßn t·ª≠ c√≥ Type: 'LINE' ho·∫∑c 'WORD'
    // Ta ch·ªâ l·∫•y c√°c d√≤ng (LINE) ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    
    const detectedLines = result.TextDetections
      .filter(item => item.Type === 'LINE') // Ch·ªâ l·∫•y d√≤ng text
      .map(item => item.DetectedText) // L·∫•y n·ªôi dung text
      .join('\n'); // Gh√©p th√†nh ƒëo·∫°n vƒÉn

    console.log(`‚úÖ Ph√°t hi·ªán ƒë∆∞·ª£c ${result.TextDetections.length} text elements`);
    
    return detectedLines;

  } catch (error) {
    console.error('‚ùå L·ªói khi g·ªçi AWS Rekognition:', error);
    throw new Error(`Kh√¥ng th·ªÉ nh·∫≠n di·ªán text trong ·∫£nh: ${error.message}`);
  }
}

// Export h√†m ƒë·ªÉ s·ª≠ d·ª•ng ·ªü file kh√°c
module.exports = {
  detectTextInImage
};
